{"version":3,"sources":["Space.js","Tabs.js","Parking.js","App.js","serviceWorker.js","index.js"],"names":["Space","handler","_this","props","toggle","react_default","a","createElement","className","onClick","this","taken","Component","Tabs","handleClick","removeAll","ButtonGroup_default","aria-label","Button_default","variant","Parking","state","allParking","_this2","parks","map","park","index","Space_Space","key","Tabs_Tabs","onClickSearch","id","isTrue","App","setState","i","tempParks","src","alt","width","height","console","log","Parking_Parking","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.303c1fde.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Space extends Component {\r\n\r\n    handler = ()=>{\r\n        this.props.toggle()\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div className='card col-4' onClick={this.handler}>\r\n        {this.props.taken}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default class Tabs extends Component {\r\n    handleClick=()=>{\r\n        this.props.removeAll()\r\n    }\r\nrender() {\r\n    return (\r\n      <div className=\"space\">\r\n       <ButtonGroup aria-label=\"Basic example\">\r\n  <Button variant=\"secondary\" onClick={this.handleClick}>Alfaisal University</Button>\r\n  <Button variant=\"secondary\" onClick={this.handleClick}>Saudi Electronic University</Button>\r\n</ButtonGroup>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport Space from './Space'\r\n\r\nimport Tabs from './Tabs';\r\n\r\n\r\nexport default class Parking extends Component {\r\n\r\n    state = {\r\n        allParking: this.props.allParking,\r\n    \r\n    }\r\n\r\n\r\n  render() {\r\n\r\n\r\n   let parks = this.state.allParking.map((park, index)=>{\r\nreturn <Space taken={park} key={index} toggle={()=>{this.props.toggle(index)}} />\r\n    })\r\n\r\n\r\n    return ( \r\n        <div  className=\"row\">\r\n        <div className=\"col-5\">\r\n        <div className=\"form1\">\r\n      <Tabs  removeAll={this.props.removeAll} />\r\n     \r\n            <h1 className=\"space\">Find the available parking</h1> \r\n             <button className=\"button1 \" onClick={()=>this.props.onClickSearch()}>search</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-7 imgCorner \">\r\n        <div id=\"spaceParking\">\r\n         <div className ={\"row \" +this.props.isTrue}>{parks}</div> \r\n      </div>\r\n      </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Parking from './Parking';\n\n\nclass App extends Component {\n\n  state = {\n    park: ['P','P','P','P','P','P','P','P','P','P','P','P'],\n    isTrue:''\n  }\n\n  onClickSearch =()=>{\n      var className =\"animated flash colorPark\"\n      this.setState({isTrue:className})  \n  }\n \n\n  toggle = (i) => {\n    let tempParks = this.state.park\n\n    if(tempParks[i] === 'P'){\n\n      tempParks[i] = <img id=\"imgc\" src=\"https://requestreduce.org/images250_/car-clipart-overhead-9.png\" alt=\"car\" width=\"200px\" height=\"120px\" />\n    } \n    this.setState({park: tempParks})\n  }\n  \n  handleClick=()=>{\n    let tempParks = this.state.park\nfor (let i in tempParks){\n  tempParks[i] = 'P'\n}\nthis.setState({park: tempParks})\n\n    console.log(\"clicked\")\n  //  return this.setState ({\n  //     allParking: this.props.allParking   \n  //   })\n  }\n \n\n  render() {\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <img className=\"App-logo\" src=\"http://www.cashadvance6online.com/data/archive/img/513887479.png\" alt=\"logo\" width=\"340\" height=\"90\"/>\n     <div className=\"container\">\n     <h1 className=\"App-h1 col-10\">Park Your Car</h1>\n     </div>\n \n      </header>\n      \n\n      <Parking removeAll={this.handleClick} allParking={this.state.park} toggle={this.toggle} onClickSearch={this.onClickSearch} isTrue={this.state.isTrue} />\n  \n  </div>    \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}